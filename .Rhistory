p<-temp*(count-averageCount)
p<-sum(p)
sx<-temp*(temp-averageTemp)
sx<-sum(sx)
tempBeta1<-p/sx
tempBeta0<-averageCount- tempBeta1*averageTemp
#check temp
model1<-lm(count~temp)
summary(model1)
#humidity
p1<-humidity*(count-averageCount)
p1<-sum(p1)
sx1<-humidity*(humidity-averagehumidity)
sx1<-sum(sx1)
humidityBeta1<-p1/sx1
humidityBeta0<-averageCount- tempBeta1*averagehumidity
#check temp
model2<-lm(count~humidity)
summary(model2)
#temp
p2<-windspeed*(count-averageCount)
p2<-sum(p)
sx2<-windspeed*(windspeed-averagewindspeed)
sx2<-sum(sx2)
windspeedBeta1<-p2/sx2
windspeedBeta0<-averageCount- tempBeta1*averagewindspeed
#check temp
model3<-lm(count~windspeed)
summary(model3)
averageCount<-mean(count)
averageHumidity<-mean(humidity)
averageTemp<-mean(temp)
averagewindspeed<-mean(windspeed)
#temp
p<-temp*(count-averageCount)
p<-sum(p)
sx<-temp*(temp-averageTemp)
sx<-sum(sx)
tempBeta1<-p/sx
tempBeta0<-averageCount- tempBeta1*averageTemp
#check temp
model1<-lm(count~temp)
summary(model1)
tempBeta1
tempBeta0
#humidity
p1<-humidity*(count-averageCount)
p1<-sum(p1)
sx1<-humidity*(humidity-averagehumidity)
sx1<-sum(sx1)
humidityBeta1<-p1/sx1
humidityBeta0<-averageCount- tempBeta1*averagehumidity
#check temp
model2<-lm(count~humidity)
summary(model2)
humidityBeta1
humidityBeta0
#windspeed
p2<-windspeed*(count-averageCount)
p2<-sum(p)
sx2<-windspeed*(windspeed-averagewindspeed)
sx2<-sum(sx2)
windspeedBeta1<-p2/sx2
windspeedBeta0<-averageCount- tempBeta1*averagewindspeed
#check windspeed
model3<-lm(count~windspeed)
summary(model3)
windspeedBeta1
windspeedBeta0
averageCount<-mean(count)
averageHumidity<-mean(humidity)
averageTemp<-mean(temp)
averagewindspeed<-mean(windspeed)
#temp
p<-temp*(count-averageCount)
p<-sum(p)
sx<-temp*(temp-averageTemp)
sx<-sum(sx)
tempBeta1<-p/sx
tempBeta0<-averageCount- tempBeta1*averageTemp
#check temp
model1<-lm(count~temp)
summary(model1)
tempBeta1
tempBeta0
#humidity
p1<-humidity*(count-averageount)
averageCount<-mean(count)
averageHumidity<-mean(humidity)
averageTemp<-mean(temp)
averagewindspeed<-mean(windspeed)
#temp
p<-temp*(count-averageCount)
p<-sum(p)
sx<-temp*(temp-averageTemp)
sx<-sum(sx)
tempBeta1<-p/sx
tempBeta0<-averageCount- tempBeta1*averageTemp
#check temp
model1<-lm(count~temp)
summary(model1)
tempBeta1
tempBeta0
#humidity
p1<-humidity*(count-averageCount)
p1<-sum(p1)
sx1<-humidity*(humidity-averageHumidity)
sx1<-sum(sx1)
humidityBeta1<-p1/sx1
humidityBeta0<-averageCount- tempBeta1*averagehumidity
#check temp
model2<-lm(count~humidity)
summary(model2)
humidityBeta1
humidityBeta0
#windspeed
p2<-windspeed*(count-averageCount)
p2<-sum(p2)
sx2<-windspeed*(windspeed-averageWindspeed)
averageCount<-mean(count)
averageHumidity<-mean(humidity)
averageTemp<-mean(temp)
averagewindspeed<-mean(windspeed)
#temp
p<-temp*(count-averageCount)
p<-sum(p)
sx<-temp*(temp-averageTemp)
sx<-sum(sx)
tempBeta1<-p/sx
tempBeta0<-averageCount- tempBeta1*averageTemp
#check temp
model1<-lm(count~temp)
summary(model1)
tempBeta1
tempBeta0
#humidity
p1<-humidity*(count-averageCount)
p1<-sum(p1)
sx1<-humidity*(humidity-averageHumidity)
sx1<-sum(sx1)
humidityBeta1<-p1/sx1
humidityBeta0<-averageCount- tempBeta1*averagehumidity
#check temp
model2<-lm(count~humidity)
summary(model2)
humidityBeta1
humidityBeta0
#windspeed
p2<-windspeed*(count-averageCount)
p2<-sum(p2)
sx2<-windspeed*(windspeed-averagewindspeed)
sx2<-sum(sx2)
windspeedBeta1<-p2/sx2
windspeedBeta0<-averageCount- tempBeta1*averagewindspeed
#check windspeed
model3<-lm(count~windspeed)
summary(model3)
windspeedBeta1
windspeedBeta0
averageCount<-mean(count)
averageHumidity<-mean(humidity)
averageTemp<-mean(temp)
averagewindspeed<-mean(windspeed)
#temp
p<-temp*(count-averageCount)
p<-sum(p)
sx<-temp*(temp-averageTemp)
sx<-sum(sx)
tempBeta1<-p/sx
tempBeta0<-averageCount- tempBeta1*averageTemp
#check temp
model1<-lm(count~temp)
summary(model1)
tempBeta1
tempBeta0
#humidity
p1<-humidity*(count-averageCount)
p1<-sum(p1)
sx1<-humidity*(humidity-averageHumidity)
sx1<-sum(sx1)
humidityBeta1<-p1/sx1
humidityBeta0<-averageCount- humidityBeta1*averageHumidity
#check temp
model2<-lm(count~humidity)
summary(model2)
humidityBeta1
humidityBeta0
#windspeed
p2<-windspeed*(count-averageCount)
p2<-sum(p2)
sx2<-windspeed*(windspeed-averagewindspeed)
sx2<-sum(sx2)
windspeedBeta1<-p2/sx2
windspeedBeta0<-averageCount- tempBeta1*averagewindspeed
#check windspeed
model3<-lm(count~windspeed)
summary(model3)
windspeedBeta1
windspeedBeta0
getwd()
setwd("/Users/rockgu/Downloads/")
bike <- read.csv(file = "bike_share.csv", header = T)
count<-bike$count
temp<-bike$temp
humidity<-bike$humidity
windspeed<-bike$windspeed
plot(temp,count,ylab ="temp",xlab="count",main="temp vs count",ph=16)
tempC<-cor(count, temp)
#the correlation is 0.3944
plot(count,humidity,ylab ="humidity",xlab="count",main="humidity vs count",ph=16)
humidityC<-cor(count,humidity)
#the correlation is -0.3173
plot(count,windspeed,ylab ="windspeed",xlab="count",main="windspeed vs count",ph=16)
windspeedC<- cor(count,windspeed)
#the correlation is 0.1014
averageCount<-mean(count)
averageHumidity<-mean(humidity)
averageTemp<-mean(temp)
averagewindspeed<-mean(windspeed)
#temp
p<-temp*(count-averageCount)
p<-sum(p)
sx<-temp*(temp-averageTemp)
sx<-sum(sx)
tempBeta1<-p/sx
tempBeta0<-averageCount- tempBeta1*averageTemp
#check temp
model1<-lm(count~temp)
summary(model1)
tempBeta1
tempBeta0
#humidity
p1<-humidity*(count-averageCount)
p1<-sum(p1)
sx1<-humidity*(humidity-averageHumidity)
sx1<-sum(sx1)
humidityBeta1<-p1/sx1
humidityBeta0<-averageCount- humidityBeta1*averageHumidity
#check temp
model2<-lm(count~humidity)
summary(model2)
humidityBeta1
humidityBeta0
#windspeed
p2<-windspeed*(count-averageCount)
p2<-sum(p2)
sx2<-windspeed*(windspeed-averagewindspeed)
sx2<-sum(sx2)
windspeedBeta1<-p2/sx2
windspeedBeta0<-averageCount- windspeedBeta1*averagewindspeed
#check windspeed
model3<-lm(count~windspeed)
summary(model3)
windspeedBeta1
windspeedBeta0
plot(temp,count,ylab ="temp",xlab="count",main="temp vs count",ph=16)
abline(model1, col = "red", lwd = 2)
plot(temp,count,ylab ="temp",xlab="count",main="temp vs count",ph=16)
abline(model1, col = "red", lwd = 2)
plot(count,humidity,ylab ="humidity",xlab="count",main="humidity vs count",ph=16)
abline(model2, col = "red", lwd = 2)
plot(count,windspeed,ylab ="windspeed",xlab="count",main="windspeed vs count",ph=16)
abline(model3, col = "red", lwd = 2)
plot(temp,count,ylab ="temp",xlab="count",main="temp vs count",ph=16)
abline(model1, col = "red", lwd = 2)
plot(count,humidity,ylab ="humidity",xlab="count",main="humidity vs count",ph=16)
abline(model2, col = "red", lwd = 2)
plot(count,windspeed,ylab ="windspeed",xlab="count",main="windspeed vs count",ph=16)
abline(model3, col = "red", lwd = 2)
plot(temp,count,ylab ="temp",xlab="count",main="temp vs count",ph=16)
abline(model1, col = "red", lwd = 2)
plot(count,humidity,ylab ="humidity",xlab="count",main="humidity vs count",ph=16)
abline(model2, col = "red", lwd = 2)
plot(count,windspeed,ylab ="windspeed",xlab="count",main="windspeed vs count",ph=16)
abline(model3, col = "red", lwd = 10)
plot(temp,count,ylab ="temp",xlab="count",main="temp vs count",ph=16)
abline(model1, col = "red", lwd = 2)
plot(count,humidity,ylab ="humidity",xlab="count",main="humidity vs count",ph=16)
abline(model2, col = "red", lwd = 2)
plot(count,windspeed,ylab ="windspeed",xlab="count",main="windspeed vs count",ph=16)
abline(model3, col = "red", lwd = 1000)
plot(temp,count,ylab ="temp",xlab="count",main="temp vs count",ph=16)
abline(model1, col = "red", lwd = 2)
plot(count,humidity,ylab ="humidity",xlab="count",main="humidity vs count",ph=16)
abline(model2, col = "red", lwd = 2)
plot(count,windspeed,ylab ="windspeed",xlab="count",main="windspeed vs count",ph=16)
abline(model3, col = "red", lwd = 2)
actuallyHumility<-humidityBeta0+humidityBeta1*40
actuallytemp<-tempBeta0+tempBeta1*70
actuallywindspeed<- windspeedBeta0+windspeedBeta1*10
averageCount<-mean(count)
averageHumidity<-mean(humidity)
averageTemp<-mean(temp)
averagewindspeed<-mean(windspeed)
#temp
p<-temp*(count-averageCount)
p<-sum(p)
sx<-temp*(temp-averageTemp)
sx<-sum(sx)
tempBeta1<-p/sx
tempBeta0<-averageCount- tempBeta1*averageTemp
#check temp
model1<-lm(count~temp)
summary(model1)
tempBeta1
tempBeta0
#humidity
p1<-humidity*(count-averageCount)
p1<-sum(p1)
sx1<-humidity*(humidity-averageHumidity)
sx1<-sum(sx1)
humidityBeta1<-p1/sx1
humidityBeta0<-averageCount- humidityBeta1*averageHumidity
#check temp
model2<-lm(count~humidity)
summary(model2)
humidityBeta1
humidityBeta0
#windspeed
p2<-windspeed*(count-averageCount)
p2<-sum(p2)
sx2<-windspeed*(windspeed-averagewindspeed)
sx2<-sum(sx2)
windspeedBeta1<-p2/sx2
windspeedBeta0<-averageCount- windspeedBeta1*averagewindspeed
#check windspeed
model3<-lm(count~windspeed)
summary(model3)
windspeedBeta1
windspeedBeta0
season<-bike$season
weather<-bike$weather
plot(count,season,ylab ="count",xlab="season",main="season vs count",ph=16)
plot(count,weather,ylab ="count",xlab="weather",main="weather vs count",ph=16)
modelS <- lm(count ~ season)
modelW <-lm(count~weather)
modelS <- lm(count ~ season)
summary(modelS)
modelW <-lm(count~weather)
summary(modelW)
season<-bike$season
weather<-bike$weather
plot(count,season,ylab ="season",xlab="count",main="season vs count",ph=16)
plot(count,weather,ylab ="count",xlab="weather",main="weather vs count",ph=16)
season<-bike$season
weather<-bike$weather
plot(season,count,ylab ="count",xlab="season",main="season vs count",ph=16)
plot(count,weather,ylab ="count",xlab="weather",main="weather vs count",ph=16)
season<-bike$season
weather<-bike$weather
plot(season,count,ylab ="count",xlab="season",main="season vs count",ph=16)
plot(weather,count,ylab ="count",xlab="weather",main="weather vs count",ph=16)
plot(temp,count,ylab ="count",xlab="temp",main="temp vs count",ph=16)
abline(model1, col = "red", lwd = 2)
plot(humidity,count,ylab ="count",xlab="humidity",main="humidity vs count",ph=16)
abline(model2, col = "red", lwd = 2)
plot(windspeed,count,ylab ="countd",xlab="windspeed",main="windspeed vs count",ph=16)
abline(model3, col = "red", lwd = 2)
#g
season<-bike$season
weather<-bike$weather
boxplot(season~count,ylab ="count",xlab="season",main="season vs count",ph=16)
boxplot(weather~count,ylab ="count",xlab="weather",main="weather vs count",ph=16)
#g
season<-bike$season
weather<-bike$weather
boxplot(count~season,ylab ="count",xlab="season",main="season vs count",ph=16)
boxplot(count~season,ylab ="count",xlab="weather",main="weather vs count",ph=16)
modelS <- lm(count ~ season)
summary(modelS)
modelW <-lm(count~weather)
summary(modelW)
#this is not practicable. when is season equal 0 the count is 125.07
#b
averageCount<-mean(count)
averageHumidity<-mean(humidity)
averageTemp<-mean(temp)
averagewindspeed<-mean(windspeed)
#temp
p<-temp*(count-averageCount)
p<-sum(p)
sx<-temp*(temp-averageTemp)
sx<-sum(sx)
tempBeta1<-p/sx
tempBeta0<-averageCount- tempBeta1*averageTemp
#check temp
model1<-lm(count~temp)
summary(model1)
tempBeta1
tempBeta0
#humidity
p1<-humidity*(count-averageCount)
p1<-sum(p1)
sx1<-humidity*(humidity-averageHumidity)
sx1<-sum(sx1)
humidityBeta1<-p1/sx1
humidityBeta0<-averageCount- humidityBeta1*averageHumidity
#check temp
model2<-lm(count~humidity)
summary(model2)
humidityBeta1
humidityBeta0
#windspeed
p2<-windspeed*(count-averageCount)
p2<-sum(p2)
sx2<-windspeed*(windspeed-averagewindspeed)
sx2<-sum(sx2)
windspeedBeta1<-p2/sx2
windspeedBeta0<-averageCount- windspeedBeta1*averagewindspeed
#check windspeed
model3<-lm(count~windspeed)
summary(model3)
windspeedBeta1
windspeedBeta0
modelS <- lm(count ~ season)
summary(modelS)
modelW <-lm(count~weather)
summary(modelW)
#this is not practicable. when is season equal 0 the count is 125.07
#lines(r, 0, type = "p", col = "red")
for (i in 1:5){
r <- r + (exp(-r) - r)/(exp(-r) + 1)
}
curve(f(x), 0,2, lwd = 2)
curve(0*x, 0, 2, add = TRUE)
r <- 2 # initial value
#lines(r, 0, type = "p", col = "red")
for (i in 1:5){
r <- r + (exp(-r) - r)/(exp(-r) + 1)
}
######## Newton's method
# Solve e^-x = x. f(x) = e^-x - x. f'(x) = -e^-x - 1
# R has a root finder
f <- function(x) exp(-x)-x
rr <- uniroot(f, c(0,10))
rr$root
# Now let's try to program it ourself using Newton's method
curve(f(x), 0,2, lwd = 2)
curve(0*x, 0, 2, add = TRUE)
r <- 2 # initial value
#lines(r, 0, type = "p", col = "red")
for (i in 1:5){
r <- r + (exp(-r) - r)/(exp(-r) + 1)
}
####### Let R completely take care of MLE (will numerically find the max)
#setwd("/Users/xchen98/Dropbox/Yes/teaching/2018sprStats371/Rfiles/")
#setwd("/home/xuemei/Dropbox/Yes/teaching/2018sprStats371/Rfiles/")
setwd("C:/Users/Xuemei/Dropbox/Yes/teaching/2018sprStats371/Rfiles/")
df <- read.table("gamma_data.txt", header = TRUE)
data <- df$x
summary(data) # this will give you some info
## We want to use the 'mle' function in the 'stats4' package
#install.packages("stats4")
library(stats4)
? mle
## Notice we need to initialize a function which is defined to be the negative log-likelihood function
minuslogl.gam <- function(theta, kappa) {
y <- dgamma(data, shape = kappa, scale = theta)
# return -sum ln(y)
nLL <- -sum(log(y))
return(nLL)
}
## Use MMEs as starting values
n <- length(data)
kappa.mme <- (n*mean(data)^2) / ((n-1)*var(data))
theta.mme <- ((n-1)*var(data)) / (n*mean(data))
## Calculate Gamma MLEs:
fit.gam <- mle(minuslogl.gam, start = list(theta = theta.mme, kappa = kappa.mme))
summary(fit.gam)
theta.mle <- fit.gam@coef[1]
kappa.mle <- fit.gam@coef[2]
## How did we do and how is it compared with MME
hist(data, prob = T, main = "Histogram of Observed Data with MLE and MME Curve Overlayed", xlab = "Observed Data")
curve(dgamma(x, shape = kappa.mme, scale = theta.mme), col="blue", lwd=2, add=TRUE, yaxt="n")
curve(dgamma(x, shape = kappa.mle, scale = theta.mle), col="red", lwd=2, add=TRUE, yaxt="n")
legend("topright", legend = c("MME","MLE"), col = c("blue","red"), lwd = 2)
######## Newton's method
# Solve e^-x = x. f(x) = e^-x - x. f'(x) = -e^-x - 1
# R has a root finder
f <- function(x) exp(-x)-x
rr <- uniroot(f, c(0,10))
rr$root
# Now let's try to program it ourself using Newton's method
curve(f(x), 0,2, lwd = 2)
curve(0*x, 0, 2, add = TRUE)
r <- 2 # initial value
#lines(r, 0, type = "p", col = "red")
for (i in 1:5){
r <- r + (exp(-r) - r)/(exp(-r) + 1)
}
r
# Solve e^-x = x. f(x) = e^-x - x. f'(x) = -e^-x - 1
# R has a root finder
f <- function(x) exp(-x)-x
rr <- uniroot(f, c(0,10))
rr$root
# Now let's try to program it ourself using Newton's method
curve(f(x), 0,2, lwd = 2)
curve(0*x, 0, 2, add = TRUE)
r <- 2 # initial value
#lines(r, 0, type = "p", col = "red")
for (i in 1:5){
r <- r + (exp(-r) - r)/(exp(-r) + 1)
}
r
credit <- read.csv(file = "incident_category.csv", header = T)
setwd("/Users/rockgu/Documents/Data Visualization/homework1-rockgu")
credit <- read.csv(file = "incident_category.csv", header = T)
## Here we consider a fuller version of the credit card data
library(ISLR)
? Credit
View(credit)
